@page "/chat"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<header>
    <DeerDiary_Frontend.Components.Layout.NavMenu></DeerDiary_Frontend.Components.Layout.NavMenu>
</header>

<body>
    <div class="container-fluid p-4" style="background-color: #FFF0C7; color: black; height:auto;">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="question-box rounded-3 p-3 mb-4" style="background-color: #C09173; color: white;">
                    <h5>Question</h5>
                    <p>@currentQuestion</p>
                </div>

                <div class="form-group mb-4">
                    <label for="answerInput" class="form-label">Your Answer</label>
                    <InputTextArea @bind-Value="answer" class="form-control" id="answerInput" rows="5" placeholder="Type your answer here" style="height: 20vh;"></InputTextArea>
                </div>

                <div class="d-grid">
                    <button @onclick="SubmitAnswer" class="list-group-item rounded" style="background-color: #97946B; color: white;">
                        Submit Answer <img src="/bootstrap/images/right-arrow.png" style="overflow: hidden; height: 2vh; padding: 0;" />
                    </button>
                </div>
            </div>
        </div>
    </div>
</body>

@code {
    private string currentQuestion = "Loading question...";
    private string answer = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the question from the backend
        var response = await Http.GetAsync("https://localhost:7050/journal/SpecificQuestion");

        if (response.IsSuccessStatusCode)
        {
            currentQuestion = await response.Content.ReadAsStringAsync();
        }
        else
        {
            currentQuestion = "Failed to load question. Please try again later.";
        }
    }

    private async Task SubmitAnswer()
    {
        // Send the answer to the backend
        var answerModel = new { Answer = answer };
        var response = await Http.PostAsJsonAsync("https://localhost:7050/journal/SendResponse", answerModel);

        if (response.IsSuccessStatusCode)
        {
            
            answer = string.Empty; 
            await OnInitializedAsync();
        }
        else
        {
            // Handle error (e.g., display an error message)
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Submission failed: {errorMessage}");
        }
    }
}
